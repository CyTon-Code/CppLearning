#include <iostream>
#include <fstream>

using namespace std;
struct Student {
//    1. Прізвище і ініціали.
    char *first_name;
//    2. Номер групи.
    int number_group;
//    3. Успішність (масив із чотирьох елементів).
    int appraisals[4];//[4]
};


//ofstream fout("CmakeLists.txt");
void save_list(Student *List, int length) {
    ofstream file_out("file_out.txt");
    for (int i = 0; i < length; i++) {
        file_out << List[i].first_name << " " << List[i].number_group
                 << ' ' << List[i].number_group << endl;
    }
    file_out << endl;
    file_out.close();
}

Student *read_list() {
    Student List[10];
    ifstream file_in("file_in.txt");
//    for (auto &i : List) {
    for (int i = 0; i < 10; i++) {
        file_in >> List[i].first_name
         >> List[i].number_group
         >> List[i].appraisals[0]
         >> List[i].appraisals[1]
         >> List[i].appraisals[2]
         >> List[i].appraisals[3];
    }
    file_in.close();
    return List;
}

int main() {
//    setlocale(LC_ALL, "rus"); // корректное отображение Кириллицы

    Student *List = read_list();
    int length = 10;
    for (int i = 0; i < length; i++) {
        cout << List[i].number_group;
    }
//    save_list(List, length);
    return 0;
}
/*
Короткі підсумки
1. Структури застосовуються для логічного об’єднання зв’язаних між собою
даних різних типів.
2. Після опису структурного типу ставиться крапка з комою.
3. Елементи структури називаються полями. Поля можуть бути любого
основного типу, масивом, покажчиком, об’єднанням або структурою.
4. При зверненні до поля використовується операція вибору: при зверненні
через ім’я структури - „крапка ”; при зверненні через покажчик - „->” .
5. Структури одного типу можна присвоювати одна одній.
6. Введення/виведення структури виконується по елементах.
7. Структури, пам’ять під які виділяє компілятор, можна ініціювати
перерахуванням значень їх елементів.


Порядок виконання індивідуального завдання
1. Створити програму для введення даних в масив, який складається з
десяти структур типу заданого індивідуальним завданням і запису даних
у файл.
2. Створити другу програму для читання створеного файлу, виконання
пункту 1 індивідуального завдання і запису відсортованих даних у новий
файл.
3. Створити третю програму для читання створеного файлу і виконання
пунктів 2-3 індивідуального завдання.


Варіанти індивідуальних завдань
Варіант 2. Описати структуру з іменем STUDENT, яка містить наступні поля:
1. Прізвище і ініціали.
2. Номер групи.
3. Успішність (масив із чотирьох елементів).
Написати програму, яка виконує наступні дії:
1. Впорядковує записи STUDENT по зростанню середнього балу.
2. Виведення на екран прізвищ і номерів груп для всіх студентів, включених
в масив, які мають оцінки 4 і 5.
3. Якщо таких студентів нема, то вивести відповідне повідомлення.


Контрольні питання
1. Як описується структура?
2. Що таке список описувачів?
3. Якого типу можуть бути елементи структури?
4. Коли можна опустити ім’я типу при описі структури?
5. Як визначити програмно об’єм пам’яті виділеної під структуру?
6. Який механізм звернення до елементів структури?
7. Як відбувається присвоєння для змінних структурованого типу?
*/